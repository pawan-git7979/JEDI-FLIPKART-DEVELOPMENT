package com.flipkart.dao.FlipFitGymCenter;

import com.flipkart.bean.FlipFitGymCenter;
import com.flipkart.constant.SQLQueries;
import com.flipkart.utils.FlipFitDBUtil;
import java.sql.*;
import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;

public class FlipFitGymCenterImpl implements FlipFitGymCenterInterface {

    @Override
    public boolean addGym(FlipFitGymCenter gym) {
        try (Connection conn = FlipFitDBUtil.getConnection();
             PreparedStatement stmt = conn.prepareStatement(SQLQueries.ADD_GYM)) {
            stmt.setString(1, gym.getName());
            stmt.setString(2, gym.getLocation());
            stmt.setInt(3, gym.getOwnerId());
            return stmt.executeUpdate() > 0;
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return false;
    }

    @Override
    public boolean updateGymDetails(FlipFitGymCenter gym) {
        try (Connection conn = FlipFitDBUtil.getConnection();
             PreparedStatement stmt = conn.prepareStatement(SQLQueries.UPDATE_GYM_DETAILS)) {
            stmt.setString(1, gym.getName());
            stmt.setString(2, gym.getLocation());
            stmt.setInt(3, gym.getId());
            return stmt.executeUpdate() > 0;
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return false;
    }

    @Override
    public List<FlipFitGymCenter> getAllGyms() {
        List<FlipFitGymCenter> gyms = new ArrayList<>();
        String query = SQLQueries.GET_ALL_GYMS_FOR_GYM_CENTER;
        
        try (Connection conn = FlipFitDBUtil.getConnection();
             PreparedStatement stmt = conn.prepareStatement(query);
             ResultSet rs = stmt.executeQuery()) {

            // Using Stream API to collect gym centers
            gyms = Stream.generate(() -> {
                        try {
                            if (rs.next()) {
                                FlipFitGymCenter gym = new FlipFitGymCenter();
                                gym.setId(rs.getInt("id"));
                                gym.setName(rs.getString("name"));
                                gym.setLocation(rs.getString("location"));
                                return gym;
                            }
                        } catch (SQLException e) {
                            e.printStackTrace();
                        }
                        return null;
                    })
                    .takeWhile(Objects::nonNull)  // Keep adding while the result set has data
                    .collect(Collectors.toList());

        } catch (SQLException e) {
            e.printStackTrace();
        }
        return gyms;
    }
}
