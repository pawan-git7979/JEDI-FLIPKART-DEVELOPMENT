package com.flipkart.dao.FlipFitBooking;

import com.flipkart.bean.FlipFitBooking;
import com.flipkart.utils.FlipFitDBUtil;
import java.sql.*;
import java.util.*;
import java.util.stream.Collectors;

import com.flipkart.constant.SQLQueries;

public class FlipFitBookingImpl implements FlipFitBookingInterface {

    @Override
    public FlipFitBooking getBookingById(int bookingId) {
        try (Connection conn = FlipFitDBUtil.getConnection();
             PreparedStatement stmt = conn.prepareStatement(SQLQueries.GET_BOOKING_BY_ID)) {
            stmt.setInt(1, bookingId);
            ResultSet rs = stmt.executeQuery();

            if (rs.next()) {
                FlipFitBooking booking = new FlipFitBooking();
                booking.setBookingId(rs.getInt("id"));
                booking.setUserId(rs.getInt("user_id"));
                booking.setCenterId(rs.getInt("gym_id"));
                return booking;
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return null;
    }

    @Override
    public List<FlipFitBooking> getBookingsByUser(int userId) {
        List<FlipFitBooking> bookings = new ArrayList<>();
        String query = SQLQueries.GET_BOOKINGS_BY_USER;
        try (Connection conn = FlipFitDBUtil.getConnection();
             PreparedStatement stmt = conn.prepareStatement(query)) {
            stmt.setInt(1, userId);
            ResultSet rs = stmt.executeQuery();

            // Using Stream API to process the result set and collect the bookings
            bookings = Stream.generate(() -> {
                        try {
                            FlipFitBooking booking = new FlipFitBooking();
                            booking.setBookingId(rs.getInt("id"));
                            booking.setUserId(rs.getInt("user_id"));
                            booking.setCenterId(rs.getInt("gym_id"));
                            return booking;
                        } catch (SQLException e) {
                            e.printStackTrace();
                            return null;
                        }
                    })
                    .takeWhile(booking -> {
                        try {
                            return rs.next();
                        } catch (SQLException e) {
                            e.printStackTrace();
                            return false;
                        }
                    })
                    .filter(Objects::nonNull) // Filter out any null bookings
                    .collect(Collectors.toList());

        } catch (SQLException e) {
            e.printStackTrace();
        }
        return bookings;
    }

    @Override
    public boolean cancelBooking(int bookingId) {
        try (Connection conn = FlipFitDBUtil.getConnection();
             PreparedStatement stmt = conn.prepareStatement(SQLQueries.CANCEL_BOOKING)) {
            stmt.setInt(1, bookingId);
            return stmt.executeUpdate() > 0;
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return false;
    }
}
