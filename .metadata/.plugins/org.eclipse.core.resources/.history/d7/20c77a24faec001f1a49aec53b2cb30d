package com.flipkart.dao.FlipFitCustomer;

import com.flipkart.bean.*;
import com.flipkart.constant.SQLQueries;
import com.flipkart.utils.FlipFitDBUtil;
import java.sql.*;
import java.util.*;
import java.util.stream.Collectors;

public class FlipFitCustomerImpl implements FlipFitCustomerInterface {

    public boolean registerGymCustomer(FlipFitGymCustomer customer) {
        try (Connection conn = FlipFitDBUtil.getConnection()) {
            conn.setAutoCommit(false);

            String query = SQLQueries.REGISTER_GYM_CUSTOMER;
            try (PreparedStatement stmt = conn.prepareStatement(query)) {
                stmt.setInt(1, customer.getUserId());
                stmt.setString(2, customer.getGovernmentDocumentNumber());

                int affectedRows = stmt.executeUpdate();
                if (affectedRows == 0) {
                    System.out.println("‚ùå ERROR: Customer insertion failed!");
                    conn.rollback();  // Rollback transaction on failure
                    return false;
                }
                conn.commit(); // Commit the transaction
                return true;
            } catch (SQLException e) {
                conn.rollback();  // Ensure rollback on any exception
                throw e;
            }
        } catch (Exception e) {
            e.printStackTrace();
            return false;
        }
    }

    @Override
    public List<String> getAvailableCities() {
        List<String> cities = new ArrayList<>();
        String query = SQLQueries.GET_AVAILABLE_CITIES;
        try (Connection conn = FlipFitDBUtil.getConnection();
             PreparedStatement stmt = conn.prepareStatement(query);
             ResultSet rs = stmt.executeQuery()) {
            while (rs.next()) {
                cities.add(rs.getString("location"));
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return cities;
    }

    @Override
    public List<FlipFitGymCenter> getGymsByCity(String city) {
        List<FlipFitGymCenter> gyms = new ArrayList<>();
        String query = SQLQueries.GET_GYMS_BY_CITY;
        try (Connection conn = FlipFitDBUtil.getConnection();
             PreparedStatement stmt = conn.prepareStatement(query)) {
            stmt.setString(1, city);
            ResultSet rs = stmt.executeQuery();

            // Use Stream API to collect gym centers
            gyms = new ArrayList<>(
                    Stream.generate(() -> {
                        try {
                            if (rs.next()) {
                                return new FlipFitGymCenter(
                                        rs.getInt("gymId"),
                                        rs.getString("name"),
                                        rs.getString("location"),
                                        rs.getInt("adminId"),
                                        rs.getInt("ownerId"),
                                        null
                                );
                            }
                        } catch (SQLException e) {
                            e.printStackTrace();
                        }
                        return null;
                    })
                    .takeWhile(Objects::nonNull) // Continue until no gyms are found
                    .collect(Collectors.toList())
            );
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return gyms;
    }

    @Override
    public List<FlipFitGymSlot> getAvailableSlots(int gymId) {
        List<FlipFitGymSlot> slots = new ArrayList<>();
        String query = SQLQueries.GET_AVAILABLE_SLOTS;
        try (Connection conn = FlipFitDBUtil.getConnection();
             PreparedStatement stmt = conn.prepareStatement(query)) {
            stmt.setInt(1, gymId);
            ResultSet rs = stmt.executeQuery();

            // Using Streams to process slots
            slots = Stream.generate(() -> {
                        try {
                            if (rs.next()) {
                                return new FlipFitGymSlot(
                                        rs.getInt("slotId"),
                                        rs.getInt("gymId"),
                                        rs.getString("startTime"),
                                        rs.getString("endTime"),
                                        rs.getInt("numOfSeats"),
                                        rs.getInt("numOfSeatsBooked"),
                                        rs.getInt("price")
                                );
                            }
                        } catch (SQLException e) {
                            e.printStackTrace();
                        }
                        return null;
                    })
                    .takeWhile(Objects::nonNull) // Keep adding while there are rows in the result set
                    .collect(Collectors.toList());

        } catch (SQLException e) {
            e.printStackTrace();
        }
        return slots;
    }

    @Override
    public void addToWaitlist(int userId, int slotId) {
        String query = SQLQueries.ADD_TO_WAITLIST;
        try (Connection conn = FlipFitDBUtil.getConnection();
             PreparedStatement stmt = conn.prepareStatement(query)) {
            stmt.setInt(1, userId);
            stmt.setInt(2, slotId);
            stmt.executeUpdate();
            System.out.println("User " + userId + " added to waitlist for slot " + slotId);
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    @Override
    public FlipFitBooking bookSlot(int userId, int gymId, Integer slotId, int booked) {
        String query = SQLQueries.BOOK_SLOT;
        String updateSlotQuery = SQLQueries.UPDATE_SLOT_BOOKING;

        try (Connection conn = FlipFitDBUtil.getConnection();
             PreparedStatement stmt = conn.prepareStatement(query, Statement.RETURN_GENERATED_KEYS);
             PreparedStatement updateSlotStmt = conn.prepareStatement(updateSlotQuery)) {

            stmt.setInt(1, userId);
            stmt.setInt(2, gymId);

            if (slotId == null) {
                slotId = 0;
            }
            stmt.setInt(3, slotId);

            String status = (booked == 1) ? "BOOKED" : "WAITLISTED";
            stmt.setString(4, status);
            int affectedRows = stmt.executeUpdate();

            if (affectedRows > 0) {
                if (slotId > 0 && booked == 1) {
                    updateSlotStmt.setInt(1, slotId);
                    updateSlotStmt.executeUpdate();
                }

                ResultSet generatedKeys = stmt.getGeneratedKeys();
                if (generatedKeys.next()) {
                    return new FlipFitBooking(
                            generatedKeys.getInt(1),
                            userId,
                            gymId,
                            slotId,
                            (booked == 1) ? BookingStatus.BOOKED : BookingStatus.WAITLISTED,
                            0,
                            null,
                            null
                    );
                }
            }

        } catch (SQLException e) {
            e.printStackTrace();
        }

        return null;
    }

    @Override
    public List<FlipFitBooking> getUserBookings(int userId) {
        List<FlipFitBooking> bookings = new ArrayList<>();
        String query = SQLQueries.GET_USER_BOOKINGS;
        try (Connection conn = FlipFitDBUtil.getConnection();
             PreparedStatement stmt = conn.prepareStatement(query)) {
            stmt.setInt(1, userId);
            ResultSet rs = stmt.executeQuery();

            // Using Stream API to convert result set to list of bookings
            bookings = Stream.generate(() -> {
                        try {
                            if (rs.next()) {
                                return new FlipFitBooking(
                                        rs.getInt("bookingId"),
                                        rs.getInt("userId"),
                                        rs.getInt("centerId"),
                                        rs.getInt("slotId"),
                                        BookingStatus.valueOf(rs.getString("status")),
                                        rs.getInt("paymentId"),
                                        rs.getTimestamp("bookingTime").toLocalDateTime(),
                                        rs.getTimestamp("updatedTime") != null ? rs.getTimestamp("updatedTime").toLocalDateTime() : null
                                );
                            }
                        } catch (SQLException e) {
                            e.printStackTrace();
                        }
                        return null;
                    })
                    .takeWhile(Objects::nonNull) // Continue until no more bookings
                    .collect(Collectors.toList());

        } catch (SQLException e) {
            e.printStackTrace();
        }
        return bookings;
    }

    @Override
    public List<FlipFitPayment> getUserPayments(int userId) {
        List<FlipFitPayment> payments = new ArrayList<>();
        String query = SQLQueries.GET_USER_PAYMENTS;

        try (Connection conn = FlipFitDBUtil.getConnection();
             PreparedStatement stmt = conn.prepareStatement(query)) {
            stmt.setInt(1, userId);
            ResultSet rs = stmt.executeQuery();

            payments = Stream.generate(() -> {
                        try {
                            if (rs.next()) {
                                return new FlipFitPayment(
                                        rs.getInt("paymentId"),
                                        rs.getInt("userId"),
                                        rs.getDouble("amount"),
                                        rs.getString("status")
                                );
                            }
                        } catch (SQLException e) {
                            e.printStackTrace();
                        }
                        return null;
                    })
                    .takeWhile(Objects::nonNull)
                    .collect(Collectors.toList());

        } catch (Exception e) {
            e.printStackTrace();
        }
        return payments;
    }

    @Override
    public List<FlipFitNotification> getUserNotifications(int userId) {
        List<FlipFitNotification> notifications = new ArrayList<>();
        String query = SQLQueries.GET_USER_NOTIFICATIONS;

        try (Connection conn = FlipFitDBUtil.getConnection();
             PreparedStatement stmt = conn.prepareStatement(query)) {

            stmt.setInt(1, userId);
            ResultSet rs = stmt.executeQuery();

            notifications = Stream.generate(() -> {
                        try {
                            if (rs.next()) {
                                return new FlipFitNotification(
                                        rs.getInt("notificationId"),
                                        rs.getInt("userId"),
                                        rs.getString("message"),
                                        rs.getString("status")
                                );
                            }
                        } catch (SQLException e) {
                            e.printStackTrace();
                        }
                        return null;
                    })
                    .takeWhile(Objects::nonNull)
                    .collect(Collectors.toList());

        } catch (Exception e) {
            e.printStackTrace();
        }
        return notifications;
    }
}
